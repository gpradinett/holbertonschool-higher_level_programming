=============================
The ``0-add_integer`` module
=============================

Using ``add_integer``
---------------------

Import the function:

	>>> add_integer = __import__('0-add_integer').add_integer

Basic cases on success:

	>>> add_integer(2, 2)
	4

	>>> add_integer(-1, 2)
	1

	>>> add_integer(20001, -1)
	20000

	>>> add_integer(-10.6, -1)
	-11

Testing default argument b = 98:

	>>> add_integer(2)
	100
	
Testing default argument 'b' with 'a' as a string:

	>>> add_integer("hola")
	Traceback (most recent call last):
	...
        TypeError: a must be an integer

	>>> add_integer("")
	Traceback (most recent call last):
	...
        TypeError: a must be an integer

None case (nothing is pass as argument):

	Not passing anything:

	>>> add_integer(None)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	Passing 'a' and 'b' as None:

	>>> add_integer(None, None)
	Traceback (most recent call last):
        ...
        TypeError: a must be an integer

	Passing 'a' as None:

        >>> add_integer(None, 5)
        Traceback (most recent call last):
        ...
        TypeError: a must be an integer

	Passing 'b' as None:

	>>> add_integer(5, None)
	Traceback (most recent call last):
        ...
        TypeError: b must be an integer

Passing agruments that are not of type int, like: lists, set, tuples, bool and dictionary:

	Passing a list as argument 'a':

	>>> add_integer([55], 5)
	Traceback (most recent call last):
        ...
        TypeError: a must be an integer

	Passing a tuple as argument 'a':

	>>> add_integer((5, 5), 5)
	Traceback (most recent call last):
        ...
        TypeError: a must be an integer

	Passing a set as argument 'b':

	>>> add_integer(5, {"apple"})
	Traceback (most recent call last):
        ...
        TypeError: b must be an integer

	Passing a dictionary as argument 'b':
	
	>>> add_integer(5, {"Julian", 25})
	Traceback (most recent call last):
        ...
        TypeError: b must be an integer

	Passing a bool as argument 'a':
	
	>>> add_integer(True, 5)
	Traceback (most recent call last):
        ...
        TypeError: a must be an integer

Test extra arguments:
	
	One extra argument (function receives only 2 arguments not 3):

	>>> add_integer(5, 4, 3)
	Traceback (most recent call last):
        ...
        TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

	Two extra arguments:

	>>> add_integer(1, 2, 3, 4)
	Traceback (most recent call last):
	...
	TypeError: add_integer() takes from 1 to 2 positional arguments but 4 were given

Testing no arguments:

	>>> add_integer()
	Traceback (most recent call last):
	...
	TypeError: add_integer() missing 1 required positional argument: 'a'

Maximum and minimum numbers for python ("inf" represents infinity):

	Maxmimum number:

	>>> add_integer(float("inf"), 2)
     	Traceback (most recent call last):
     	...
     	OverflowError: cannot convert float infinity to integer

	Minimum number:

	>>> add_integer(float("-inf"), -2)
     	Traceback (most recent call last):
     	...
     	OverflowError: cannot convert float infinity to integer

Testing spaces arguments (syntax error):

	>>> add_integer( , )
	Traceback (most recent call last):
	...	
	SyntaxError: invalid syntax
